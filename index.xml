<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vidify</title>
    <link>https://vidify.org/</link>
    <description>Recent content on Vidify</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://vidify.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Optional parameters in Rust</title>
      <link>https://vidify.org/blog/rust-parameters/</link>
      <pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vidify.org/blog/rust-parameters/</guid>
      <description>Disclaimer: I will now be posting these kind of posts at my personal blog: https://nullderef.com/blog/rust-parameters/
Optional or default parameters are a very interesting feature of some languages that Rust specifically doesn&amp;rsquo;t cover (and looks like it won&amp;rsquo;t anytime soon ). Say your library has lots of endpoints like so:
fn endpoint&amp;lt;T1, T2, T3, ...&amp;gt;(mandatory: T1, opt1: Option&amp;lt;T2&amp;gt;, opt2: Option&amp;lt;T3&amp;gt;, ...); In this case, when you call endpoint, you have to use endpoint(mandatory, None, None, .</description>
    </item>
    
    <item>
      <title>Discord server</title>
      <link>https://vidify.org/blog/discord/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vidify.org/blog/discord/</guid>
      <description>I have created a Discord server for Vidify! You can join using this link. It&amp;rsquo;s meant for quick conversations outside of GitHub, for both depelopment and user reasons.
I was initially going to use an open source alternative but decided to go for Discord because it&amp;rsquo;s the easiest. If you&amp;rsquo;d like to suggest any other platform please let me know.
If you have experience with Discord servers I&amp;rsquo;d love to get some help as well, as I haven&amp;rsquo;t managed one before :)</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://vidify.org/wiki/faq/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vidify.org/wiki/faq/</guid>
      <description>My favorite music player isn&amp;rsquo;t supported by Vidify Vidify was created with this in mind. There are many different music players and we are working on supporting as many of them as possible. Please do let us know so that we know what players are more popular.
Vidify doesn&amp;rsquo;t recognize some downloaded songs If the song doesn&amp;rsquo;t have a metadata field with its title and artist (the latter is optional), Vidify is unable to know what song is playing.</description>
    </item>
    
    <item>
      <title>Linux Media Players</title>
      <link>https://vidify.org/wiki/linux-media-players/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vidify.org/wiki/linux-media-players/</guid>
      <description>This is the most recommended API for Linux users. It obtains information from any MPRIS compatible media player (MPRIS is a standard interface widely used for media players on Linux). All you may need to install are the following libraries, although they will probably be installed in your system already:
  PyGI (not packaged on PyPi, you need to install it from your distribution&amp;rsquo;s repository - it&amp;rsquo;s usually called python-gi, python3-gobject or pygobject).</description>
    </item>
    
    <item>
      <title>Spotify for Windows and Mac OS</title>
      <link>https://vidify.org/wiki/spotify-for-windows-and-macos/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vidify.org/wiki/spotify-for-windows-and-macos/</guid>
      <description>This is the default API for Windows and Mac OS users. You don&amp;rsquo;t have to install anything, since it&amp;rsquo;s already installed by default on these platforms.
Current limitations  The library used to access information from the Spotify API is unable to obtain its position. Mac OS usage hasn&amp;rsquo;t been tested because their emulators are really limited. If you&amp;rsquo;re having issues, please open an issue with detailed information.  </description>
    </item>
    
    <item>
      <title>Spotify Web API</title>
      <link>https://vidify.org/wiki/spotify-web-api/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vidify.org/wiki/spotify-web-api/</guid>
      <description>All the supported platforms have a way to obtain song data from the desktop Spotify app, but it may not be as reliable as the official web API, or may lack features in comparison to it. For example, with the Spotify Web API, you can control the music on other devices other than where Vidify is running. However, it also brings other downsides:
 You have to sign in and set it up manually (only once though) Only Spotify Premium users are able to use some functions API calls are limited More internet usage is needed to continuously communicate with Spotify  The simplest way to activate the web API is by selecting it in the GUI when the app is launched for the first time.</description>
    </item>
    
    <item>
      <title>The Audiosync extension</title>
      <link>https://vidify.org/wiki/audiosync-extension/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vidify.org/wiki/audiosync-extension/</guid>
      <description>You&amp;rsquo;ll realize that some videos aren&amp;rsquo;t exactly in sync. That&amp;rsquo;s because the videos are played from YouTube, and they are usually different versions of the song, have intros and outros&amp;hellip; which mess up the timing. Although this is very complicated to fix, Vidify has an audio synchronization extension that tries to.
The full repository is in vidify/audiosync. It&amp;rsquo;s still Work-In-Progress, so it might be harder to use.
Audiosync is only available on Linux for now.</description>
    </item>
    
    <item>
      <title>Website Launch</title>
      <link>https://vidify.org/blog/launch/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vidify.org/blog/launch/</guid>
      <description>I&amp;rsquo;m officially releasing Vidify&amp;rsquo;s website!
This site is intended for non-developers, I&amp;rsquo;ll migrate part of the GitHub documentation here on how to use Vidify. The wiki is also better managed in here because multiple languages can be used easily, and anyone can still contribute by making a PR to vidify/vidify.org-source, which is better than wiki contributions.
I still have to polish it a lot, but it&amp;rsquo;s ready to be public already.</description>
    </item>
    
    <item>
      <title>The external player protocol</title>
      <link>https://vidify.org/wiki/the-external-player-protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vidify.org/wiki/the-external-player-protocol/</guid>
      <description>The external player defines a public model to follow to communicate with other devices. That way, anyone can implement their own app or program to display the videos. Here&amp;rsquo;s a more detailed description of how to do so:
Establishing the connection To connect the devices, a DNS-based Service Discovery (DNS-SD) mechanism is used. The Vidify server will register itself in the network, and anyone inside it will be able to connect to it.</description>
    </item>
    
  </channel>
</rss>
